from matplotlib import pyplot as plt
import numpy as np

def euclideanNorm(arr):
    x = arr[0]
    y = arr[1]
    z = arr[2]
    return np.sqrt(x**2 + y**2 + z**2)

def plotEnergyAndMomentum(time,ang_moment,energy,name_solver,savefig=False):
    plt.rc('text',usetex=True)
    plt.rc('font', family='serif')

    plt.figure(1)
    plt.plot(time,ang_moment)
    plt.title('Magnitude of the angular momentum generated by running %s \nwith N = %d'%(name_solver,len(time)))
    plt.xlabel('Time (year)')
    plt.ylabel(r'$|\vec{a}_{momentum}|$',fontsize=18)

    plt.figure(2)
    plt.plot(time,energy)
    plt.title('Total energy generated by running %s \n with N = %d'%(name_solver,len(time)))
    plt.xlabel('Time (year)')
    plt.ylabel(r'$E_{kinetic} + E_{potential}$',size=14)
    plt.gcf().subplots_adjust(left=0.15)

    if savefig:
        plt.figure(1)
        plt.savefig('n=%d'%(len(time))+name_solver+'_angMoment.pdf')
        plt.clf()

        plt.figure(2)
        plt.savefig('n=%d'%(len(time))+name_solver+'_energy.pdf')
        plt.clf()
    else:
        plt.show()

def testForZeroMomentum(momentum):
    tol = 1E-14
    m0 = np.array(momentum[0])
    for m in momentum[1:]:
        if (np.abs(np.array(m)-m0) >= tol).all():
            raise AssertionError( "Momentum not conserved; got: "\
                                 +arr2str(m)+" expected: "+ arr2str(m0) )

def arr2str(arr):
    return "["+str(arr[0])+" , "+str(arr[1])+" , "+str(arr[2])+"]"

def testConservationEnergyAndMomentum(kinetic_energy,potential_energy,angular_momentum):
    tol = 1E-10 #the values from the files is written with this precision

    k0 = kinetic_energy[0]; p0 = potential_energy[0]
    anyError = False #To check if we aleready have printed out an error

    for k,p in zip(kinetic_energy[1:],potential_energy[1:]):
        if (not anyError and abs((k+p)-(k0+p0)) >= tol):
            print "total energy not conserved; got: %.15f, expected: %.15f"%(k+p,k0+p0)
            anyError = True

    anyError = False
    am0 = np.array(angular_momentum[0]);
    for ang_moment in angular_momentum[1:]:
        #print ang_moment-am0
        if (not anyError and np.abs(((np.array(ang_moment)-am0))>= tol)[2] ):
            print "angular momentum not conserved; got: "+arr2str(ang_moment)+" expected: "+ arr2str(am0)
            anyError = True

    return #End: testConservationEnergyAndMomentum

def getConservationEnergyAndMomentum(filename):
    with open(filename,'r') as infile:
        infile.readline()
        num_bodies = int(infile.readline().split()[-1])
        n = int(infile.readline().split()[-1])
        [infile.readline() for i in xrange(2)]

        kinetic_energy = np.zeros(n)
        potential_energy = np.zeros(n)
        angular_momentum = [0]*n
        momentum = [0]*n
        for i in range(n):
            [infile.readline() for j in xrange(2*num_bodies+1)]

            kinetic_energy[i] = float(infile.readline().split()[-1])
            potential_energy[i] = float(infile.readline().split()[-1])
            angular_momentum[i] = [float(j) for j in infile.readline().split()[2:]]
            momentum[i] = [eval(j) for j in infile.readline().split()[1:]]
            [infile.readline() for j in xrange(2)]

    return (kinetic_energy,potential_energy,angular_momentum,momentum)


def plotPosition(filename,title,savefigure=False):
    with open(filename,'r') as infile:
        com = [float(coor) for coor in infile.readline().split()[4:]]
        num_bodies = int(infile.readline().split()[-1])
        n = int(infile.readline().split()[-1])

        x_vals = np.zeros(shape=(num_bodies,n))
        y_vals = np.zeros(shape=(num_bodies,n))
        z_vals = np.zeros(shape=(num_bodies,n))

        names = infile.readline().split()[1:];
        #read name of planets
        labels_bodies = [name for name in names]
        infile.readline() #skip year for now
        for i in xrange(n):
            for j in xrange(num_bodies):
                pos = [float(p) for p in infile.readline().split()[1:]]
                #vel = [float(v) for v in infile.readline().split()[1:]]
                infile.readline() #skip velocity for now

                x_vals[j][i] = pos[0]
                y_vals[j][i] = pos[1]
                z_vals[j][i] = pos[2]
            #skip momentum and energy and year
            for j in xrange(7):
                infile.readline() #skip year for now

    plt.rc('text',usetex=True)
    plt.rc('font', family='serif')

    com_text = 'Center of mass'
    fig = plt.figure()
    ax = plt.subplot(111)
    for i in xrange(num_bodies):
            if labels_bodies[i] == '-':
                line = ax.plot(x_vals[i],y_vals[i])

                com_text = 'Sun'
            else:
                line = ax.plot(x_vals[i],y_vals[i],label=labels_bodies[i])

            if num_bodies == 10:
                color = line[0].get_color()
                ax.plot(x_vals[i][-1],y_vals[i][-1],marker='o',color=color)
                ax.annotate(r'%s'%labels_bodies[i],xy = (x_vals[i][-1],y_vals[i][-1]+.1*y_vals[i][-1]), \
                                fontsize=10,horizontalalignment='center')
            ax.hold('on')



    plt.grid()

    plt.title(r'%s'%title)
    plt.xlabel('x',fontsize=14)
    plt.ylabel('y',fontsize=14)

    ax.plot(com[0],com[1],'ko')
    ax.annotate(r'%s'%com_text,xy = (com[0],com[1]+.1*com[1]), \
                fontsize=8,horizontalalignment='center')
    box = ax.get_position()
    ax.set_position([box.x0, box.y0, box.width * 0.8, box.height])
    ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
    if savefigure:
        if num_bodies == 10:
            xlims = [[-45,45],[-30,30],[-15,15],[-6,6],[-2,2],[-1.2,1.2],[-.6,.5],[-.01,.01]]
            ylims = [[-45,45],[-30,30],[-15,15],[-6,6],[-2,2],[-1.2,1.2],[-.6,.5],[-.01,.01]]
            for i in xrange(len(xlims)):
                plt.gca().set_xlim(xlims[i])
                plt.gca().set_ylim(ylims[i])
                plt.savefig(str(i)+filename[:-3]+'pdf')
        else:
            plt.savefig(str(i)+filename[:-3]+'pdf')

    else:
        plt.show()
    plt.clf()

if __name__ == '__main__':
    testConservationEnergyAndMomentum("earth-sun.txt")
    #plotPosition("earth-sun.txt")
